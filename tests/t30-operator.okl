// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
kernel void setup(void *ctx, void *qdata, CeedInt Q,
                  const CeedScalar *const *u, CeedScalar *const *v,int *rtn) {
  *rtn=~0;
  printf("\033[36;1m[OccaQFunction][setup] rtn=%x\033[m",*rtn);fflush(stdout);
  CeedScalar *w = (double*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    w[i] = u[1][i]*u[4][i];
  }
  *rtn=0;
  printf("\033[36;1m[OccaQFunction][setup] rtn=%x\033[m",*rtn);fflush(stdout);
}

// *****************************************************************************
kernel void mass(void *ctx, void *qdata, CeedInt Q,
                 const CeedScalar *const *u, CeedScalar *const *v,int *rtn) {
  *rtn=~0;
  printf("\033[36;1m[OccaQFunction][mass] rtn=%x\033[m",*rtn);fflush(stdout);
  const CeedScalar *w = (double*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    v[0][i] = w[i] * u[0][i];
  }
  *rtn=0;
  printf("\033[36;1m[OccaQFunction][mass] rtn=%x\033[m",*rtn);fflush(stdout);
}
