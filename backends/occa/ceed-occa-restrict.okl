// *****************************************************************************
kernel void kRestrict0(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i >= esize) continue;
    vv[i] = uu[indices[i]];
  }
}

// *****************************************************************************
kernel void kRestrict1(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[i+elemsize*(d+ncomp*e)] =
          uu[indices[i+elemsize*e]+ndof*d];
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict2(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[i+elemsize*(d+ncomp*e)] =
          uu[d+ncomp*indices[i+elemsize*e]];
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict3(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i >= esize) continue;
    atomicAdd(vv + indices[i], uu[i]);
  }
}

// *****************************************************************************
kernel void kRestrict4(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[i+elemsize*e+ndof*d] += uu[i+elemsize*(d+e*ncomp)];
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict5(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[d+ncomp*indices[i+elemsize*e]] += uu[i+elemsize*(d+e*ncomp)];
      }
    }
  }
}
