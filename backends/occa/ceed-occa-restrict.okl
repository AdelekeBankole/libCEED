// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
kernel void kRestrict0(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i >= esize) continue;
    vv[i] = uu[indices[i]];
  }
}

// *****************************************************************************
kernel void kRestrict1(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[i+elemsize*(d+ncomp*e)] =
          uu[indices[i+elemsize*e]+ndof*d];
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict2(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
        vv[i+elemsize*(d+ncomp*e)] =
          uu[d+ncomp*indices[i+elemsize*e]];
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict3(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i >= esize) continue;
    atomicAdd(vv + indices[i], uu[i]);
    printf("\n\tv[%d]=u[%d]",indices[i],i);
  }
}

// *****************************************************************************
/*
  v[0]=u[0]
  v[1]=u[1]
  v[2]=u[2]
  v[3]=u[3]
  v[4]=u[4]
  v[4]=u[5]
  v[5]=u[6]
  v[6]=u[7]
  v[7]=u[8]
  v[8]=u[9]
  v[8]=u[10]
  v[9]=u[11]
  v[10]=u[12]
  v[11]=u[13]
  v[12]=u[14]
  v[12]=u[15]
  v[13]=u[16]
  v[14]=u[17]
  v[15]=u[18]
  v[16]=u[19]
  v[16]=u[20]
  v[17]=u[21]
  v[18]=u[22]
  v[19]=u[23]
  v[20]=u[24]
*/
  kernel void kRestrict3b(const int *indices,
                        const int *offsets,
                        const double* uu,
                        double* vv) {
  for (int i=0; i<ndof; i++; tile(TILE_SIZE)){
    if (i >= ndof) continue;
    const int offset = offsets[i];
    const int nextOffset = offsets[i+1];
    double dofValue = 0.0;
    printf("\n\tv[%d]+=",i);
    for (int j=offset; j<nextOffset; ++j){
      const int lid = j;
      dofValue += uu[j];
      printf(" u[(j=%d)%d]",j,lid);
    }
    vv[i] = dofValue;
  }
}

// *****************************************************************************
kernel void kRestrict4(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
         atomicAdd(vv + indices[i+elemsize*e]+ndof*d, uu[i+elemsize*(d+e*ncomp)]);
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict5(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < nelem; e++; tile(TILE_SIZE)){
    if (e >= nelem) continue;
    for (int d = 0; d < ncomp; d++){
      for (int i=0; i<elemsize; i++) {
         atomicAdd(vv + d+ncomp*indices[i+elemsize*e], uu[i+elemsize*(d+e*ncomp)]);
      }
    }
  }
}
