// *****************************************************************************
kernel void kRestrict0(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i < esize){
      vv[i] = uu[indices[i]];
    }
  }
}

// *****************************************************************************
kernel void kRestrict1(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < rnelem; e++; tile(TILE_SIZE)){
    if (e < rnelem) {
      for (int d = 0; d < ncomp; d++){
        for (int i=0; i<relemsize; i++) {
          vv[i+relemsize*(d+ncomp*e)] =
            uu[indices[i+relemsize*e]+rndof*d];
        }
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict2(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < rnelem; e++; tile(TILE_SIZE)){
    if (e < rnelem) {
      for (int d = 0; d < ncomp; d++){
        for (int i=0; i<relemsize; i++) {
          vv[i+relemsize*(d+ncomp*e)] =
            uu[d+ncomp*indices[i+relemsize*e]];
        }
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict3(const int *indices,
                       const double* uu,
                       double* vv) {
  for (int i=0; i<esize; i++; tile(TILE_SIZE)){
    if (i < esize) {
      atomicAdd(vv + indices[i], uu[i]);
    }
  }
}

// *****************************************************************************
kernel void kRestrict4(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < rnelem; e++; tile(TILE_SIZE)){
    if (e < rnelem) {
      for (int d = 0; d < ncomp; d++){
        for (int i=0; i<relemsize; i++) {
          atomicAdd(vv + (i+relemsize*e+rndof*d), uu[i+relemsize*(d+e*ncomp)]);
        }
      }
    }
  }
}

// *****************************************************************************
kernel void kRestrict5(const int ncomp,
                       const int *indices,
                       const double* uu,
                       double* vv) {
  for (int e = 0; e < rnelem; e++; tile(TILE_SIZE)){
    if (e < rnelem) {
      for (int d = 0; d < ncomp; d++){
        for (int i=0; i<relemsize; i++) {
          atomicAdd(vv + (d+ncomp*indices[i+relemsize*e]), uu[i+relemsize*(d+e*ncomp)]);
        }
      }
    }
  }
}
