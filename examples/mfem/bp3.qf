// Copyright (c) 2017-2018, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory. LLNL-CODE-734707.
// All Rights reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

//TODO make these functions valid in any dimension using the ctx
inline __device__ void f_build_diff(void *ctx, CeedInt Q, const CeedScalar *J, const CeedScalar *qw, CeedScalar *qd) {
  // J: 0 2   qd: 0 1   adj(J):  J22 -J12
  //    1 3       1 2           -J21  J11
  const CeedScalar J11 = J[0];
  const CeedScalar J21 = J[1];
  const CeedScalar J12 = J[2];
  const CeedScalar J22 = J[3];
  const CeedScalar w = qw[0] / (J11*J22 - J21*J12);
  qd[0] =   w * (J12*J12 + J22*J22);
  qd[1] = - w * (J11*J12 + J21*J22);
  qd[2] =   w * (J11*J11 + J21*J21);
}

/// libCEED Q-function for applying a diff operator
inline __device__ void f_apply_diff(void *ctx, CeedInt Q, const CeedScalar *ug, const CeedScalar *qd, CeedScalar *vg) {
  // in[0], out[0] have shape [dim, nc=1, Q]
  const CeedScalar ug0 = ug[0];
  const CeedScalar ug1 = ug[1];
  vg[0] = qd[0]*ug0 + qd[1]*ug1;
  vg[1] = qd[1]*ug0 + qd[2]*ug1;
}