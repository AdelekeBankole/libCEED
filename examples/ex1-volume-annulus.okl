// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

/// A structure used to pass additional data to f_build_mass
//struct BuildContext { CeedInt dim, space_dim; };


/// libCEED Q-function for building quadrature data for a mass operator
kernel void f_build_mass(void *ctx, void *qdata, CeedInt Q,
                         const CeedScalar *const *u, CeedScalar *const *v) {
  CeedScalar *w = (double*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    w[i] = u[1][i]*u[4][i];
  }
/*  struct BuildContext *bc = (struct BuildContext*)ctx;
  CeedScalar *qd = (CeedScalar*)qdata;
  const CeedScalar *J = u[1], *qw = u[4];
  const int dims = (bc->dim + 10*bc->space_dim);
  if (dims== 11){
    for (CeedInt i=0; i<Q; i++) {
      qd[i] = J[i] * qw[i];
    }
  }
  
  if (dims==22){
    for (CeedInt i=0; i<Q; i++) {
      // 0 2
      // 1 3
      qd[i] = (J[i+Q*0]*J[i+Q*3] - J[i+Q*1]*J[i+Q*2]) * qw[i];
    }
  }

  if (dims==33){
    for (CeedInt i=0; i<Q; i++) {
      // 0 3 6
      // 1 4 7
      // 2 5 8
      qd[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8] - J[i+Q*5]*J[i+Q*7]) -
               J[i+Q*1]*(J[i+Q*3]*J[i+Q*8] - J[i+Q*5]*J[i+Q*6]) +
               J[i+Q*2]*(J[i+Q*3]*J[i+Q*7] - J[i+Q*4]*J[i+Q*6])) * qw[i];
    }
  }
  if (dims!=11 && dims!=22 && dims!33 ) assert(false);
  */
}

/// libCEED Q-function for applying a mass operator
kernel void f_apply_mass(void *ctx, void *qdata, CeedInt Q,
                        const CeedScalar *const *u, CeedScalar *const *v) {
  const CeedScalar *w = (double*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    v[0][i] = w[i] * u[0][i];
  }
  //const CeedScalar *w = (const CeedScalar*)qdata;
  //for (CeedInt i=0; i<Q; i++) v[0][i] = w[i] * u[0][i];
}
