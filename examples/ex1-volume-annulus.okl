// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;
int printf(const char *format, ...);

// *****************************************************************************
/// A structure used to pass additional data to f_build_mass
struct BuildContext { CeedInt dim, space_dim; };

// *****************************************************************************
/// libCEED Q-function for building quadrature data for a mass operator
kernel void f_build_mass(void *ctx, void *qdata, const CeedInt e, CeedInt Q,
                         const CeedScalar *u, const CeedScalar *bu,
                         CeedScalar *v, CeedScalar *bv) {
  // u[1] is Jacobians, size (Q x nc x dim) with column-major layout
  // u[4] is quadrature weights, size (Q)
  struct BuildContext *bc = (struct BuildContext*)ctx;
  switch (bc->dim + 10*bc->space_dim) {
  case 11:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      CeedScalar *qd = ((CeedScalar*)qdata)+e*Q;
      // Offset computation should depend on inmode & outmode
      const int offset = e*(Q*NC*(DIM+2));
      const CeedScalar *bJ=bu+offset;
      const CeedScalar *bQW=bu+offset+Q*NC*DIM;
      if (fabs(J[i]-bJ[i])>epsilon) printf("\033[31;1m\t1:J[%d]=%f, bJ[%d]=%f\n\033[m",i,J[i],i,bJ[i]);
      if (fabs(qw[i]-bQW[i])>epsilon) printf("\033[31;1m\t1:qw[%d]=%f, bQW[%d]=%f\n\033[m",i,qw[i],i,bQW[i]);
      qd[i] = J[i] * qw[i];
    }
    break;
  case 22:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      // 0 2
      // 1 3
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      CeedScalar *qd = ((CeedScalar*)qdata)+e*Q;
      // Offset computation should depend on inmode & outmode
      const int offset = e*(Q*NC*(DIM+2));
      const CeedScalar *bJ=bu+offset;
      const CeedScalar *bQW=bu+offset+Q*NC*DIM;
      if (fabs(J[i]-bJ[i])>epsilon) printf("\033[31;1m\t2:J[%d]=%f, bJ[%d]=%f\n\033[m",i,J[i],i,bJ[i]);
      if (fabs(qw[i]-bQW[i])>epsilon) printf("\033[31;1m\t2:qw[%d]=%f, bQW[%d]=%f\n\033[m",i,qw[i],i,bQW[i]);
      qd[i] = (J[i+Q*0]*J[i+Q*3] - J[i+Q*1]*J[i+Q*2]) * qw[i];
    }
    break;
  case 33:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      CeedScalar *qd = ((CeedScalar*)qdata)+e*Q;
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      // Offset computation should depend on inmode & outmode
      //printf("\n[f_build_mass] Q=%d, NC=%d, DIM=%d",Q,NC,DIM);
      const int offset = e*(Q*NC*(DIM+2));
      const CeedScalar *bJ=bu+offset;
      const CeedScalar *bQW=bu+offset+Q*NC*DIM;
      if (fabs(J[i]-bJ[i])>epsilon) printf("\033[31;1m\t3:J[%d]=%f, bJ[%d]=%f\n\033[m",i,J[i],i,bJ[i]);
      if (fabs(qw[i]-bQW[i])>epsilon) printf("\033[31;1m\t3:qw[%d]=%f, bQW[%d]=%f\n\033[m",i,qw[i],i,bQW[i]);
      qd[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8] - J[i+Q*5]*J[i+Q*7]) -
               J[i+Q*1]*(J[i+Q*3]*J[i+Q*8] - J[i+Q*5]*J[i+Q*6]) +
               J[i+Q*2]*(J[i+Q*3]*J[i+Q*7] - J[i+Q*4]*J[i+Q*6])) * qw[i];
    }
    break;
  default:;
  }
}

// *****************************************************************************
/// libCEED Q-function for applying a mass operator
kernel void f_apply_mass(void *ctx, void *qdata, const CeedInt e, CeedInt Q,
                         const CeedScalar *u, const CeedScalar *bu,
                         CeedScalar *v, CeedScalar *bv) {
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    const CeedScalar *w = ((CeedScalar*)qdata)+e*Q;
    // Offset computation should depend on inmode & outmode
    const int offset = e*(Q*NC*(DIM+2));
    const CeedScalar *o_bu = bu+offset;
    //printf("\n\te=%d, offset=%d, u[%d]=%f, bu[%d]=%f",e,offset,i,u[i],i,o_bu[i]);
    if (fabs(u[i]-o_bu[i])>epsilon) printf("\033[31;1mX\033[m");
    v[i] = w[i] * u[i];
  }
}
