// Copyright (c) 2017, Lawrence Livermore National Security, LLC. Produced at
// the Lawrence Livermore National Laboratory. LLNL-CODE-734707. All Rights
// reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

// *****************************************************************************
typedef int CeedInt;
typedef double CeedScalar;

// *****************************************************************************
/// A structure used to pass additional data to f_build_mass
struct BuildContext { CeedInt dim, space_dim; };

// *****************************************************************************
/// libCEED Q-function for building quadrature data for a mass operator
kernel void f_build_mass(void *ctx, void *qdata, CeedInt Q,
                        const CeedScalar *u, CeedScalar *v, int *rtn) {
  // u[1] is Jacobians, size (Q x nc x dim) with column-major layout
  // u[4] is quadrature weights, size (Q)
  struct BuildContext *bc = (struct BuildContext*)ctx;
  CeedScalar *qd = (CeedScalar*)qdata;
  //const CeedScalar *J = u[1], *qw = u[4];
  switch (bc->dim + 10*bc->space_dim) {
  case 11:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      qd[i] = J[i] * qw[i];
    }
    break;
  case 22:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      // 0 2
      // 1 3
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      qd[i] = (J[i+Q*0]*J[i+Q*3] - J[i+Q*1]*J[i+Q*2]) * qw[i];
    }
    break;
  case 33:
    for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
      if (i >= Q) continue;
      // 0 3 6
      // 1 4 7
      // 2 5 8
      const CeedScalar *J=u+Q*NC;
      const CeedScalar *qw=u+Q*NC*(DIM+1);
      qd[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8] - J[i+Q*5]*J[i+Q*7]) -
               J[i+Q*1]*(J[i+Q*3]*J[i+Q*8] - J[i+Q*5]*J[i+Q*6]) +
               J[i+Q*2]*(J[i+Q*3]*J[i+Q*7] - J[i+Q*4]*J[i+Q*6])) * qw[i];
    }
    break;
  default:*rtn=1;
    //return CeedError(NULL, 1, "dim=%d, space_dim=%d is not supported",
    //                 bc->dim, bc->space_dim);
  }
  *rtn=0;
}
/*
kernel void f_build_mass(void *ctx, void *qdata, CeedInt Q,
                         const CeedScalar *u, CeedScalar *v, int *rtn) {
  CeedScalar *qd = (CeedScalar*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    // u[1] is Jacobians, size (Q x NC x DIM) with column-major layout
    const CeedScalar *J=u+Q*NC;
    // u[4] is quadrature weights, size (Q)
    const CeedScalar *qw=u+Q*NC*(DIM+1);
    struct BuildContext *bc = (struct BuildContext*)ctx;
    const int dims=bc->dim + 10*bc->space_dim;
    printf("\n\033[31;1m%d\033[m\n",dims);
    // 0 3 6
    // 1 4 7
    // 2 5 8
    qd[i] = (J[i+Q*0]*(J[i+Q*4]*J[i+Q*8] - J[i+Q*5]*J[i+Q*7]) -
             J[i+Q*1]*(J[i+Q*3]*J[i+Q*8] - J[i+Q*5]*J[i+Q*6]) +
             J[i+Q*2]*(J[i+Q*3]*J[i+Q*7] - J[i+Q*4]*J[i+Q*6])) * qw[i];
  }
  *rtn=0;
  }*/

// *****************************************************************************
/// libCEED Q-function for applying a mass operator
kernel void f_apply_mass(void *ctx, void *qdata, CeedInt Q,
                         const CeedScalar *u, CeedScalar *v, int *rtn) {
  const CeedScalar *w = (const CeedScalar*)qdata;
  for (CeedInt i=0; i<Q; i++; tile(TILE_SIZE)) {
    if (i >= Q) continue;
    v[i] = w[i] * u[i];
  }
  *rtn=0;
}
